#!/usr/bin/env bash

list="imagelist.txt"
images="images.tar.gz"
KUBECTL_APPLY="kubectl apply -f"
KUBECTL_CREATE_SECRET="kubectl create secret generic imagepull-secret --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=imagepull_secret_file"
IMAGE_JOB="download-image-job.yaml"
REPO="gcr.io/mapr-252711/"
ID=0

create_secret() {
  ${KUBECTL_CREATE_SECRET}
  if [ $? -eq 0 ]; then
    echo "Successfully created imagepull secret"
  else
    echo "Error while creating imagepull secret"
  fi
}

usage () {
    echo "USAGE: $0 [--image-list imagelist.txt] [--images images.tar.gz]"
    echo "  [-l|--image-list path] text file with list of images; one image per line."
    echo "  [-i|--images path] tar.gz generated by docker save."
    echo "  [-h|--help] Usage message"
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -i|--images)
        images="$2"
        shift # past argument
        shift # past value
        ;;
        -l|--image-list)
        list="$2"
        shift # past argument
        shift # past value
        ;;
        -h|--help)
        help="true"
        shift
        ;;
        *)
        usage
        exit 1
        ;;
    esac
done

if [[ $help ]]; then
    usage
    exit 0
fi

create_secret

pulled=""
while IFS= read -r image_name; do
    [ -z "${image_name}" ] && continue
    export DOWNLOADED_IMAGE=${REPO}${image_name}
    export JOB_ID=$ID
    envsubst < $IMAGE_JOB | ${KUBECTL_APPLY} -
    if [ $? -eq 0 ]; then
      echo "Successfully created job for downloading image"
      while :;
      do
        if [[ "$(docker images -q ${REPO}${image_name} 2> /dev/null)" != "" ]]; then
          echo "Image pull success: ${image_name}"
          pulled="${pulled} ${REPO}${image_name}"
          break
        else
          output=$(kubectl get pods -l job-name=download-image${JOB_ID} | awk '{print $3}')
          if $(echo $output | grep -q 'ImagePullBackOff'); then
            echo "Error while pulling image ${image_name}"
            break
          else
            sleep 120
          fi
        fi
      done
    else
      echo "Error while creating job for downloading image"
    fi
    let "ID+=1"
done < "${list}"

echo "Creating ${images} with $(echo ${pulled} | wc -w | tr -d '[:space:]') images"
docker save $(echo ${pulled}) | gzip --stdout > ${images}
